{"version":3,"sources":["components/Flat.js","components/PriceMarker.js","App.js","serviceWorker.js","index.js"],"names":["Flat","selectFlat","props","flat","this","name","price","priceCurrency","imageUrl","className","onClick","style","backgroundImage","Component","PriceMarker","selected","React","App","setState","old","selectedFlat","viewport","latitude","lat","longitude","lng","handleSearch","event","input","target","value","search","flats","state","allFlats","filter","RegExp","exec","zoom","pitch","bearing","fetch","then","res","json","data","type","onChange","map","key","id","width","height","mapStyle","onViewportChange","mapboxApiAccessToken","transitionDuration","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sVA0BeA,G,kNArBbC,WAAa,WACX,EAAKC,MAAMD,WAAW,EAAKC,MAAMC,O,uDAGzB,IAAD,EAC0CC,KAAKF,MAAMC,KAApDE,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,cAAeC,EAD7B,EAC6BA,SACpC,OACE,yBAAKC,UAAU,OAAOC,QAASN,KAAKH,YAClC,yBACEQ,UAAU,eACVE,MAAO,CAAEC,gBAAgB,OAAD,OAASJ,EAAT,QAE1B,yBAAKC,UAAU,cACZJ,EADH,MACYC,EACTC,Q,GAfQM,cCUJC,G,6KARX,OACE,yBACEL,UAAS,iBAAYL,KAAKF,MAAMa,SAAW,WAAa,OAD1D,WAEMX,KAAKF,MAAMI,Y,GALGU,IAAMH,YCmGjBI,E,kDA5Fb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAwBRD,WAAa,SAACE,GACZ,EAAKe,UAAS,SAACC,GAAD,MAAU,CACtBC,aAAcjB,EACdkB,SAAS,eAAMF,EAAIE,SAAX,CAAqBC,SAAUnB,EAAKoB,IAAKC,UAAWrB,EAAKsB,WA5BlD,EAgCnBC,aAAe,SAACC,GACd,IAAMC,EAAQD,EAAME,OAAOC,MAC3B,EAAKZ,SAAS,CACZa,OAAQH,EACRI,MAAO,EAAKC,MAAMC,SAASC,QAAO,SAAChC,GAAD,OAChC,IAAIiC,OAAOR,EAAO,KAAKS,KAAKlC,EAAKE,YAnCrC,EAAK4B,MAAQ,CACXC,SAAU,GACVF,MAAO,GACPZ,aAAc,KACdW,OAAQ,GACRV,SAAU,CACRC,SAAU,WACVE,WAAY,WACZc,KAAM,GACNC,MAAO,EACPC,QAAS,IAZI,E,gEAiBE,IAAD,OAClBC,MACE,mFAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAU,EAAK3B,SAAS,CAAEgB,SAAUW,EAAMb,MAAOa,S,+BAmBjD,IAAD,OACP,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,QACb,2BACEqC,KAAK,OACLhB,MAAO1B,KAAK6B,MAAMF,OAClBgB,SAAU3C,KAAKsB,eAEjB,yBAAKjB,UAAU,SACZL,KAAK6B,MAAMD,MAAMgB,KAAI,SAAC7C,GACrB,OACE,kBAAC,EAAD,CAAM8C,IAAK9C,EAAK+C,GAAI/C,KAAMA,EAAMF,WAAY,EAAKA,kBAKzD,yBAAKQ,UAAU,OACb,kBAAC,IAAD,iBACML,KAAK6B,MAAMZ,SADjB,CAEE8B,MAAM,OACNC,OAAO,OACPC,SAAS,mDACTC,iBAAkB,SAACjC,GAAD,OAAc,EAAKH,SAAS,CAAEG,cAChDkC,qBApEV,uGAqEUC,mBAAoB,MAEnBpD,KAAK6B,MAAMD,MAAMgB,KAAI,SAAC7C,GAAD,OACpB,kBAAC,IAAD,CAAQ8C,IAAK9C,EAAK+C,GAAI5B,SAAUnB,EAAKoB,IAAKC,UAAWrB,EAAKsB,KACxD,kBAAC,EAAD,CACEnB,MAAOH,EAAKG,MACZS,SAAU,EAAKkB,MAAMb,eAAiBjB,e,GAzEtCa,IAAMH,WCEJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d294cd1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Flat.css\";\n\nclass Flat extends Component {\n  selectFlat = () => {\n    this.props.selectFlat(this.props.flat);\n  };\n\n  render() {\n    const { name, price, priceCurrency, imageUrl } = this.props.flat;\n    return (\n      <div className=\"flat\" onClick={this.selectFlat}>\n        <div\n          className=\"flat-picture\"\n          style={{ backgroundImage: `url(${imageUrl})` }}\n        ></div>\n        <div className=\"flat-title\">\n          {name} - {price}\n          {priceCurrency}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Flat;\n","import React from \"react\";\n\nimport \"./PriceMarker.css\";\n\nclass PriceMarker extends React.Component {\n  render() {\n    return (\n      <div\n        className={`marker ${this.props.selected ? \"selected\" : null}`}\n      >{`$${this.props.price}`}</div>\n    );\n  }\n}\n\nexport default PriceMarker;\n","import React from \"react\";\nimport \"./App.css\";\nimport MapGL, { Marker } from \"react-map-gl\";\n\nimport Flat from \"./components/Flat\";\nimport PriceMarker from \"./components/PriceMarker\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiY2xhaXJlZnJvZnJvZnJvIiwiYSI6ImNrZTlhZXFhajAxd3IzMW1qdWxmNmJsbXIifQ.lbPzivrmR4KpokhRw3_10A\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allFlats: [],\n      flats: [],\n      selectedFlat: null,\n      search: \"\",\n      viewport: {\n        latitude: 45.4972159, // Montreal\n        longitude: -73.6103642, // Montreal\n        zoom: 12,\n        pitch: 0,\n        bearing: 0,\n      },\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      \"https://raw.githubusercontent.com/clairefro/flats-boilerplate/master/flats.json\"\n    )\n      .then((res) => res.json())\n      .then((data) => this.setState({ allFlats: data, flats: data }));\n  }\n\n  selectFlat = (flat) => {\n    this.setState((old) => ({\n      selectedFlat: flat,\n      viewport: { ...old.viewport, latitude: flat.lat, longitude: flat.lng },\n    }));\n  };\n\n  handleSearch = (event) => {\n    const input = event.target.value;\n    this.setState({\n      search: input,\n      flats: this.state.allFlats.filter((flat) =>\n        new RegExp(input, \"i\").exec(flat.name)\n      ),\n    });\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"main\">\n          <input\n            type=\"text\"\n            value={this.state.search}\n            onChange={this.handleSearch}\n          />\n          <div className=\"flats\">\n            {this.state.flats.map((flat) => {\n              return (\n                <Flat key={flat.id} flat={flat} selectFlat={this.selectFlat} />\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"map\">\n          <MapGL\n            {...this.state.viewport}\n            width=\"100%\"\n            height=\"100%\"\n            mapStyle=\"mapbox://styles/mapbox/streets-v11?optimize=true\"\n            onViewportChange={(viewport) => this.setState({ viewport })}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n            transitionDuration={200}\n          >\n            {this.state.flats.map((flat) => (\n              <Marker key={flat.id} latitude={flat.lat} longitude={flat.lng}>\n                <PriceMarker\n                  price={flat.price}\n                  selected={this.state.selectedFlat === flat}\n                />\n              </Marker>\n            ))}\n          </MapGL>\n        </div>\n      </div>\n    );\n  }\n}\n\n// <Map center={this.state.center} flats={this.state.flats} />\n// {this.state.flats.map((flat) => (\n//   <Marker key={flat.id} coordinates={[flat.lng, flat.lat]}>\n//     <PriceMarker\n//       price={flat.price}\n//       selected={this.state.selectedFlat === flat}\n//     />\n//   </Marker>\n// ))}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}